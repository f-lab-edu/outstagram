<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.outstagram.outstagram.mapper.CommentMapper">

  <insert id="insertComment" parameterType="com.outstagram.outstagram.dto.CommentDTO">
    INSERT INTO comment (user_id, post_id, parent_comment_id, contents, level, is_deleted, create_date, update_date)
    VALUES (#{userId}, #{postId}, #{parentCommentId}, #{contents}, #{level}, #{isDeleted}, #{createDate}, #{updateDate})
  </insert>

  <resultMap id="CommentsResultMap" type="com.outstagram.outstagram.dto.CommentUserDTO">
    <id column="commentId" property="id"/>
    <result column="userId" property="userId"/>
    <result column="postId" property="postId"/>
    <result column="parent_comment_id" property="parentCommentId"/>
    <result column="level" property="level"/>
    <result column="userImgUrl" property="userImgUrl"/>
    <result column="nickname" property="nickname"/>
    <result column="contents" property="contents"/>
    <result column="create_date" property="createDate"/>
    <result column="updateDate" property="updateDate"/>

    <!-- Association for nested replies -->
    <collection property="replyList" ofType="com.outstagram.outstagram.dto.ReplyUserDTO">
      <id column="replyId" property="replyId"/>
      <result column="replyUserId" property="userId"/>
      <result column="replyParentCommentId" property="parentCommentId"/>
      <result column="replyContents" property="contents"/>
      <result column="replyLevel" property="level"/>
      <result column="replyUserImgUrl" property="userImgUrl"/>
      <result column="replyNickname" property="nickname"/>
      <result column="replyCreateDate" property="createDate"/>
      <result column="replyUpdateDate" property="updateDate"/>
    </collection>
  </resultMap>

  <select id="findByPostId" resultMap="CommentsResultMap">
    SELECT c1.id                                            AS commentId,
           u1.id                                            AS userId,
           c1.post_id                                       AS postId,
           c1.parent_comment_id                             AS parentCommentId,
           c1.level                                         AS level,
           u1.img_url                                       AS userImgUrl,
           u1.nickname                                      AS nickname,
           IF(c1.is_deleted = 1, '삭제된 댓글입니다.', c1.contents) AS contents,
           c1.create_date                                   AS createDate,
           c1.update_date                                   AS updateDate,

           c2.id                                            AS replyId,
           u2.id                                            AS replyUserId,
           c2.parent_comment_id                             AS replyParentCommentId,
           c2.level                                         AS replyLevel,
           u2.img_url                                       AS replyUserImgUrl,
           u2.nickname                                      AS replyNickname,
           IF(c2.is_deleted = 1, '삭제된 대댓글입니다.', c2.contents) AS replyContents,
           c2.create_date                                   AS replyCreateDate,
           c2.update_date                                   AS replyUpdateDate
    FROM comment AS c1
           JOIN
         user AS u1 ON c1.user_id = u1.id
           LEFT JOIN
         comment AS c2 ON c1.id = c2.parent_comment_id
           LEFT JOIN
         user AS u2 ON c2.user_id = u2.id
    WHERE c1.post_id = #{postId}
      AND c1.parent_comment_id IS NULL
    ORDER BY c1.id, c2.id
  </select>

  <select id="findByIdAndPostID" resultType="com.outstagram.outstagram.dto.CommentDTO">
    SELECT id, user_id
    FROM comment
    where id = #{commentId}
      AND post_id = #{postId}
      AND is_deleted = 0
  </select>

  <select id="findById" resultType="com.outstagram.outstagram.dto.CommentDTO">
    SELECT id, user_id, post_id
    FROM comment
    where id = #{commentId}
      AND is_deleted = 0
  </select>
  <update id="updateContentsById">
    UPDATE comment
    SET contents = #{contents},
        update_date = NOW()
    WHERE id = #{commentId}
      AND post_id = #{postId}
      AND is_deleted = 0
  </update>

  <delete id="deleteComment">
    UPDATE comment
    SET is_deleted = 1,
        update_date = NOW()
    WHERE id = #{commentId}
      AND post_id = #{postId}
      AND is_deleted = 0
  </delete>

  <delete id="deleteByPostId">
    UPDATE comment
    SET is_deleted = 1,
        update_date = NOW()
    WHERE post_id = #{postId} AND is_deleted = 0
  </delete>


</mapper>