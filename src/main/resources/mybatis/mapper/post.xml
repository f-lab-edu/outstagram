<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.outstagram.outstagram.mapper.PostMapper">

  <!--insert 성공 시, DB에서 자동으로 생성된 key를 가져와서 newPost 객체의 id 속성에 값을 넣어준다 (postMapper.insertPost(newPost);)  -->
  <insert id="insertPost" parameterType="com.outstagram.outstagram.dto.PostDTO" useGeneratedKeys="true" keyProperty="id">
    INSERT INTO POST(contents, user_id, create_date, update_date)
    VALUES (#{contents}, #{userId}, #{createDate}, #{updateDate})
  </insert>

  <resultMap id="postImageDTOMap" type="com.outstagram.outstagram.dto.PostImageDTO">
    <!-- PostDTO의 필드 매핑 -->
    <id property="id" column="post_id"/>
    <result property="contents" column="contents"/>
    <result property="likes" column="likes"/>

    <!-- PostImageDTO의 확장된 필드 매핑 -->
    <result property="imgPath" column="img_path"/>
    <result property="savedImgName" column="saved_img_name"/>
  </resultMap>

  <!-- userId로 게시물과 대표 이미지 1개 가져오기 -->
  <select id="findWithImageByUserId" resultMap="postImageDTOMap">
    SELECT p.id AS post_id,
           p.contents,
           p.likes,
           i.img_path,
           i.saved_img_name
    FROM
        post AS p
    JOIN
        image AS i ON p.id = i.post_id
    WHERE
        p.user_id = #{userId}
        AND p.is_deleted = 0
        AND i.is_deleted = 0
        AND i.id IN (
            SELECT MIN(id)
            FROM image
            WHERE is_deleted = 0
            GROUP BY post_id
      )
    ORDER BY
        p.create_date DESC
  </select>

  <!-- postId로 게시물 가져오기 -->
  <select id="findById" resultType="com.outstagram.outstagram.dto.PostDTO">
    SELECT id, user_id, contents, likes
    FROM post
    WHERE id = #{postId}
      AND is_deleted = 0
  </select>

  <update id="updateContentsById">
    UPDATE post
    SET contents = #{contents},
        update_date = NOW()
    WHERE id = #{postId}
      AND is_deleted = 0
  </update>

  <update id="deleteById">
    UPDATE post
    SET is_deleted = 1,
        update_date = NOW()
    WHERE id = #{postId}
  </update>


  <update id="updateLikeCount">
    UPDATE post
    SET likes = likes + #{count},
        update_date = NOW()
    WHERE id = #{postId}
        AND is_deleted = 0
  </update>




</mapper>