<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.outstagram.outstagram.mapper.PostMapper">


  <!--insert 성공 시, DB에서 자동으로 생성된 key를 가져와서 newPost 객체의 id 속성에 값을 넣어준다 (postMapper.insertPost(newPost);)  -->
  <insert id="insertPost" parameterType="com.outstagram.outstagram.dto.PostDTO" useGeneratedKeys="true" keyProperty="id">
    INSERT INTO post(contents, user_id, create_date, update_date, version)
    VALUES (#{contents}, #{userId}, #{createDate}, #{updateDate}, 1)
  </insert>


    <resultMap id="postImageDTOMap" type="com.outstagram.outstagram.dto.PostImageDTO">
        <!-- PostDTO의 필드 매핑 -->
        <id property="id" column="post_id"/>
        <result property="contents" column="contents"/>
        <result property="likes" column="likes"/>

        <!-- PostImageDTO의 확장된 필드 매핑 -->
        <result property="imgUrl" column="img_url"/>
        <result property="originalImgName" column="original_img_name"/>
    </resultMap>

    <!-- userId로 게시물과 대표 이미지 1개 가져오기(커서 기반 페이지네이션 적용) -->
    <select id="findWithImageByUserId" resultMap="postImageDTOMap">
        SELECT p.id AS post_id,
        p.contents,
        p.likes,
        i.img_url,
        i.original_img_name
        FROM
        post AS p
        JOIN
        image AS i ON p.id = i.post_id
        WHERE
        p.user_id = #{userId}
        AND p.is_deleted = 0
        AND i.is_deleted = 0
        <if test="lastId != null">
            AND post_id &lt; #{lastId}
        </if>
        AND i.id IN (
        SELECT MIN(id)
        FROM image
        WHERE is_deleted = 0
        GROUP BY post_id
        )

        ORDER BY
        post_id DESC
        LIMIT
        #{size}
    </select>

  <select id="getFeedIdsFromDB" resultType="Long">
    SELECT p.id
    FROM post AS p
    WHERE (p.user_id IN (
        SELECT f.to_id
        FROM follow as f
        WHERE f.from_id = #{userId})
           OR p.user_id = #{userId}
        )
      AND p.is_deleted = 0
      <if test="lastId != null">
        AND p.id &lt; #{lastId}
      </if>
    ORDER BY p.id DESC
    LIMIT #{size}
  </select>

  <select id="findIdsByUserId" resultType="Long">
    SELECT id
    FROM post
    WHERE user_id = #{userId}
      AND is_deleted = 0
      <if test="lastId != null">
      AND id &lt; #{lastId}
    </if>
    ORDER BY id DESC
    LIMIT #{size}
  </select>

  <!-- postId로 게시물 가져오기 -->
  <select id="findById" resultType="com.outstagram.outstagram.dto.PostDTO">
    SELECT id, user_id, contents, likes, version, create_date, update_date
    FROM post
    WHERE id = #{postId}
      AND is_deleted = 0
  </select>


    <update id="updateContentsById">
        UPDATE post
        SET contents = #{contents},
            update_date = NOW()
        WHERE id = #{postId}
          AND is_deleted = 0
    </update>

    <update id="deleteById">
        UPDATE post
        SET is_deleted = 1,
            update_date = NOW()
        WHERE id = #{postId}
    </update>



  <update id="updateLikeCount">
    UPDATE post
    SET likes = #{count},
        update_date = NOW()
    WHERE id = #{postId}
        AND is_deleted = 0
  </update>

  <update id="updateLikeCountAll" parameterType="java.util.List">
    <foreach collection="list" item="item" separator=";">
      UPDATE post
      SET likes = #{item.likeCount},
      update_date = NOW()
      WHERE id = #{item.postId}
      AND is_deleted = 0
    </foreach>
  </update>


    <!-- postId list 매개변수로 주어지면 해당 post들의 미리보기 정보 가져오기 -->
    <select id="findLikePostsWithImageByPostIds" resultMap="postImageDTOMap">
        SELECT p.id AS post_id,
        p.contents,
        p.likes,
        i.img_url,
        i.original_img_name
        FROM post AS p
        JOIN image AS i ON p.id = i.post_id
        WHERE post_id &lt; #{lastId}
        AND p.id IN (
            SELECT l.post_id
            FROM `like` AS l
            WHERE l.user_id = #{userId}
        )
        AND p.is_deleted = 0
        AND i.is_deleted = 0
        AND i.id IN (
        SELECT MIN(id)
        FROM image
        WHERE is_deleted = 0
        GROUP BY post_id
        )
        ORDER BY (
            SELECT l.create_date
            FROM `like` AS l
            WHERE l.post_id = post_id
            AND l.user_id = #{userId}
            ORDER BY l.create_date DESC
            LIMIT 1
        ) DESC
        LIMIT #{size}
    </select>


    <select id="findBookmarkPostsWithImageByPostIds" resultMap="postImageDTOMap">
        SELECT p.id AS post_id,
               p.contents,
               p.likes,
               i.img_url,
               i.original_img_name
        FROM post AS p
                 JOIN image AS i ON p.id = i.post_id
        WHERE post_id &lt; #{lastId}
          AND post_id IN (
            SELECT b.post_id
            FROM bookmark AS b
            WHERE b.user_id = #{userId}
        )
          AND p.is_deleted = 0
          AND i.is_deleted = 0
          AND i.id IN (
            SELECT MIN(id)
            FROM image
            WHERE is_deleted = 0
            GROUP BY post_id
        )
        ORDER BY (
             SELECT b.create_date
             FROM bookmark AS b
             WHERE b.post_id = post_id
               AND b.user_id = #{userId}
             ORDER BY b.create_date DESC
             LIMIT 1
        ) DESC
            LIMIT #{size}
    </select>

</mapper>